def growlnotify(title, message, image=nil)
  image ||= title.downcase
  image = File.expand_path("~/.autotest_images/#{image.downcase}.png")
  system %(growlnotify -n Autotest --image #{image.inspect} -m #{message.inspect} #{title.inspect})
end

Autotest.add_hook :green do |autotest|
  growlnotify 'Passed', autotest.printable
end

Autotest.add_hook :red do |autotest|
  growlnotify 'Failed', autotest.printable
end

Autotest.add_hook :error do |autotest|
  growlnotify 'Failed', 'Error running tests'
end

class Autotest
  attr_reader :filtered
  attr_reader :printable

  alias :handle_results_without_error_hook :handle_results
  def handle_results(results)
    @filtered = (results || '').
      split("\n").
      map{ |r| r.gsub(/(\e.*?m|\n)/, '') }.
      reject { |r| !r.match(/\d+\s+(example|test|scenario|step)s?/i) }
    @printable = @filtered.join("\n")
    @filtered = @filtered.inject({}) do |hash, line|
      line.scan(/([0-9]\d*)\s(\w+)/) do |number, kind|
        hash[kind.to_sym] = number.to_i
      end
      hash
    end
    tainted = handle_results_without_error_hook results
    hook :error if latest_results.nil?
    tainted
  end

  def has?(kind)
    filtered && filtered[kind.to_sym] > 0
  end
end
